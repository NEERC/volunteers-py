/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LoggedInImport } from './routes/_logged-in'
import { Route as LoggedInIndexImport } from './routes/_logged-in/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LoggedInRoute = LoggedInImport.update({
  id: '/_logged-in',
  getParentRoute: () => rootRoute,
} as any)

const LoggedInIndexRoute = LoggedInIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoggedInRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_logged-in': {
      id: '/_logged-in'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LoggedInImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_logged-in/': {
      id: '/_logged-in/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LoggedInIndexImport
      parentRoute: typeof LoggedInImport
    }
  }
}

// Create and export the route tree

interface LoggedInRouteChildren {
  LoggedInIndexRoute: typeof LoggedInIndexRoute
}

const LoggedInRouteChildren: LoggedInRouteChildren = {
  LoggedInIndexRoute: LoggedInIndexRoute,
}

const LoggedInRouteWithChildren = LoggedInRoute._addFileChildren(
  LoggedInRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LoggedInRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof LoggedInIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof LoggedInIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_logged-in': typeof LoggedInRouteWithChildren
  '/login': typeof LoginRoute
  '/_logged-in/': typeof LoggedInIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id: '__root__' | '/_logged-in' | '/login' | '/_logged-in/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoggedInRoute: typeof LoggedInRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoggedInRoute: LoggedInRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_logged-in",
        "/login"
      ]
    },
    "/_logged-in": {
      "filePath": "_logged-in.tsx",
      "children": [
        "/_logged-in/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_logged-in/": {
      "filePath": "_logged-in/index.tsx",
      "parent": "/_logged-in"
    }
  }
}
ROUTE_MANIFEST_END */
