services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - app-network
    environment: &backend-environment
      - VOLUNTEERS_LOGGING__LEVEL=${VOLUNTEERS_LOGGING__LEVEL}
      - VOLUNTEERS_JWT__SECRET=${VOLUNTEERS_JWT__SECRET}
      - VOLUNTEERS_JWT__ALGORITHM=${VOLUNTEERS_JWT__ALGORITHM}
      - VOLUNTEERS_JWT__EXPIRATION=${VOLUNTEERS_JWT__EXPIRATION}
      - VOLUNTEERS_JWT__REFRESH_EXPIRATION=${VOLUNTEERS_JWT__REFRESH_EXPIRATION}
      - VOLUNTEERS_TELEGRAM__TOKEN=${VOLUNTEERS_TELEGRAM__TOKEN}
      - VOLUNTEERS_TELEGRAM__EXPIRATION_TIME=${VOLUNTEERS_TELEGRAM__EXPIRATION_TIME}
      - VOLUNTEERS_DATABASE__URL=${VOLUNTEERS_DATABASE__URL}
      - VOLUNTEERS_SERVER__PORT=${VOLUNTEERS_SERVER__PORT}
      - VOLUNTEERS_SERVER__HOST=${VOLUNTEERS_SERVER__HOST}
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8000/hc 2> /dev/null | grep -q 'OK'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      backend-db-migration:
        condition: service_completed_successfully

  backend-db-migration:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - app-network
    command: bash -c "alembic upgrade head"
    environment: *backend-environment
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ui
      dockerfile: Dockerfile
      args:
        - PUBLIC_URL=${PUBLIC_URL}
        - MODE=${MODE}
        - VITE_TELEGRAM_BOT_HANDLE=${VITE_TELEGRAM_BOT_HANDLE}
        - VITE_TELEGRAM_BOT_ORIGIN=${VITE_TELEGRAM_BOT_ORIGIN}
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8000/nginx-hc 2> /dev/null | grep -q 'OK'"]
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    build:
      context: proxy
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - app-network
      - proxy
    environment:
      - PORT=8000
      - BACKEND_SITE=http://backend:8000
      - FRONTEND_SITE=http://frontend:8000
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:$$PORT/nginx-hc | grep -q 'OK'"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
  proxy:
    external: true
